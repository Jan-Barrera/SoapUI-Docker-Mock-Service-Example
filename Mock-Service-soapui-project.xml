<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="0da4639c-7485-4ef6-9265-3450dc53c147" activeEnvironment="Default" name="Mock-Service" resourceRoot="" defaultScriptLanguage="Groovy" soapui-version="5.5.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:restMockService id="4b153f40-d6e6-4597-9a85-73cf5d842e35" port="8080" path="/" host="localhost.localdomain" name="Mock-Rest"><con:settings/><con:properties/><con:restMockAction name="/user" method="GET" resourcePath="/user" id="7598315b-6b27-4cfb-bf59-a1c1de03979c"><con:settings/><con:defaultResponse>mock-user</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="mock-get-user" id="c6f50c9d-0c89-4a3a-a6f7-36124afe9e33" httpResponseStatus="404" mediaType="application/json"><con:settings/><con:script>def path = mockRequest.getPath()
def params = path.split('/')
def id
def name
def email
def responseStatus
if (params.length == 3) {
	id = params[2]
	name = 'test name ' + id
	email = 'test-email-'+id+'@test.com'
	responseStatus = 200
} else {
	id = ''
	name = 'UNKNOWN'
	email = 'UNKNOWN'
	responseStatus = 404
}

def datetime = new Date().format("yyyy-MM-dd HH:mm:ss")

requestContext.id = id
requestContext.name = name
requestContext.email = email
requestContext.datetime = datetime
mockResponse.setResponseHttpStatus(responseStatus)</con:script><con:responseContent>{
   "id":"${id}",
   "name":"${name}",
   "email":"${email}",
   "datetime":"${datetime}"
}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>